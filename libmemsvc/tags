!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
LIB	Makefile	/^LIB=libmemsvc$/;"	m
LIB_HEADERS	Makefile	/^LIB_HEADERS=libmemsvc.h$/;"	m
LIB_OBJS	Makefile	/^LIB_OBJS = libmemsvc.o$/;"	m
MEMREQ_OP_GETFD	memproto.h	10;"	d
MEMREQ_OP_READ	memproto.h	8;"	d
MEMREQ_OP_WRITE	memproto.h	9;"	d
MEMRSP_ERROR_FAILED	memproto.h	20;"	d
MEMRSP_ERROR_ILLEGAL	memproto.h	21;"	d
MEMRSP_ERROR_OFFLINE	memproto.h	22;"	d
MEMRSP_ERROR_OK	memproto.h	19;"	d
MEMSVC_INVALID_HANDLE_MAGIC	libmemsvc.c	28;"	d	file:
MEMSVC_MAX_WORDS	libmemsvc.h	30;"	d
MEMSVC_MAX_WORDS	memproto.h	4;"	d
MEMSVC_SYNC_MAGIC	memproto.h	5;"	d
MEMSVC_VALID_HANDLE_MAGIC	libmemsvc.c	27;"	d	file:
_MEMPROTO_H	memproto.h	2;"	d
addr	memproto.h	/^	uint32_t addr;$/;"	m	struct:memreq
c2c_mask	libmemsvc.c	/^	uint32_t c2c_mask;$/;"	m	struct:memsvc_range	file:
c2c_reg	libmemsvc.c	/^	uint32_t c2c_reg;$/;"	m	struct:memsvc_range	file:
check_handle	libmemsvc.c	/^static inline int check_handle(memsvc_handle_t svc, int validity)$/;"	f	file:
data	memproto.h	/^	uint32_t *data;$/;"	m	struct:memreq
data	memproto.h	/^	uint32_t *data;$/;"	m	struct:memrsp
dprintf	memproto.h	29;"	d
end	libmemsvc.c	/^	uint32_t end;$/;"	m	struct:memsvc_range	file:
errorcode	memproto.h	/^	uint8_t errorcode;$/;"	m	struct:memrsp
find_range	libmemsvc.c	/^static struct memsvc_range *find_range(struct memsvc_handle *svc, uint32_t addr)$/;"	f	file:
first_range	libmemsvc.c	/^	struct memsvc_range first_range;$/;"	m	struct:memsvc_handle	typeref:struct:memsvc_handle::memsvc_range	file:
free_ranges	libmemsvc.c	/^static void free_ranges(struct memsvc_range *cur)$/;"	f	file:
last_error	libmemsvc.c	/^	char last_error[512];$/;"	m	struct:memsvc_handle	file:
magic	libmemsvc.c	/^	uint32_t magic;$/;"	m	struct:memsvc_handle	file:
map	libmemsvc.c	/^	void *map;$/;"	m	struct:memsvc_range	file:
memfd	libmemsvc.c	/^	int memfd;$/;"	m	struct:memsvc_handle	file:
memreq	memproto.h	/^struct memreq {$/;"	s
memrsp	memproto.h	/^struct memrsp {$/;"	s
memsvc_close	libmemsvc.c	/^int memsvc_close(memsvc_handle_t *svc)$/;"	f
memsvc_handle	libmemsvc.c	/^struct memsvc_handle {$/;"	s	file:
memsvc_handle_t	libmemsvc.h	/^typedef struct memsvc_handle *memsvc_handle_t;$/;"	t	typeref:struct:memsvc_handle
memsvc_invalidate	libmemsvc.c	/^static void memsvc_invalidate(memsvc_handle_t svc)$/;"	f	file:
memsvc_open	libmemsvc.c	/^int memsvc_open(memsvc_handle_t *handle)$/;"	f
memsvc_range	libmemsvc.c	/^struct memsvc_range {$/;"	s	file:
memsvc_read	libmemsvc.c	/^int memsvc_read(memsvc_handle_t handle, uint32_t addr, uint32_t words, uint32_t *data)$/;"	f
memsvc_write	libmemsvc.c	/^int memsvc_write(memsvc_handle_t handle, uint32_t addr, uint32_t words, const uint32_t *data)$/;"	f
next	libmemsvc.c	/^	struct memsvc_range *next;$/;"	m	struct:memsvc_range	typeref:struct:memsvc_range::memsvc_range	file:
opcode	memproto.h	/^	uint8_t opcode;$/;"	m	struct:memreq
recvfd	libmemsvc.c	/^static int recvfd(int sock, int *fd, void *buf, int buflen)$/;"	f	file:
set_error	libmemsvc.c	/^static inline void set_error(memsvc_handle_t svc, const char *user, int err)$/;"	f	file:
start	libmemsvc.c	/^	uint32_t start;$/;"	m	struct:memsvc_range	file:
sync_magic	memproto.h	/^	uint32_t sync_magic;$/;"	m	struct:memreq
sync_magic	memproto.h	/^	uint32_t sync_magic;$/;"	m	struct:memrsp
words	memproto.h	/^	uint32_t words;$/;"	m	struct:memreq
words	memproto.h	/^	uint32_t words;$/;"	m	struct:memrsp
